stages:
 - build
 - release
 - deploy

cache:
  key: "$CI_BUILD_REF_NAME node:10"
  paths:
    - node_modules/

#
# BUILD
# Downloads dependencies and then runs Webpack build.
#
build:
  stage: build
  image: node:10
  variables:
    NODE_ENV: "production"
  before_script:
    - npm install --dev
  script:
    - npm run build
  artifacts: 
    paths: 
      - dist/

#
# RELEASE
# Build docker image and push it to our registry
#
release:
  stage: release
  image: docker:latest
  only:
    - "master"
  services:
    - docker:dind
  variables:
    DOCKER_DRIVER: "overlay"
  before_script:
    - "docker version"
    - "docker info"
    - "docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $CI_REGISTRY"
  script:
    - "docker build -t ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest --pull ."
    - "docker push ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest"
  after_script:
    - "docker logout ${CI_REGISTRY}"

deploy:
  stage: deploy
  image: gitlab/dind:latest
  before_script:
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh

    - echo "$DEPLOY_SSH_KEY" | tr -d '\r' > ~/.ssh/id_ed25519
    - chmod 600 ~/.ssh/id_ed25519
      
    - eval "$(ssh-agent -s)"
    - ssh-add ~/.ssh/id_ed25519
    - ssh-keyscan -H $DEPLOY_SERVER >> ~/.ssh/known_hosts
  
  script:
    - echo "DISCORD_TOKEN=${DEPLOY_DISCORD_SECRET}" >> ./environment.env
    - scp -r ./environment.env ./docker-compose.yml ${DEPLOY_USER}@${DEPLOY_SERVER}:~/
    - ssh $DEPLOY_USER@$DEPLOY_SERVER "docker login -u ${CI_DEPLOY_USER} -p ${CI_DEPLOY_PASSWORD} ${CI_REGISTRY}; docker-compose -f docker-compose.yml stop; docker-compose -f docker-compose.yml rm server --force; docker pull ${CI_REGISTRY}/${CI_PROJECT_PATH}:latest; docker-compose -f docker-compose.yml up -d"